pipeline {
  agent any
  parameters {
      choice choices: ['Master', 'Development', 'Feature', 'Release'], description: 'Environnement cible', name: 'ENVIRONMENT'
      booleanParam(name: 'IMPORT_COMMERCIALS_TABLES', defaultValue: true, description: 'Importer les tables commerciales recalculées par le batch de cumul')
      booleanParam(name: 'IMPORT_COMMERCIALS_INFO', defaultValue: true, description: 'Importer les informations commerciales')
      booleanParam(name: 'IMPORT_USER_ACTION_LOGGING', defaultValue: false, description: 'Importer les données de la table de log des actions utilisateurs')
  }
  environment {
    DUMP_ARCHIVE_PATH="/tmp/dump.sql.gz"
    DUMP_SRC_PATH="/tmp/dump.sql"
    DUMP_WORK_PATH="/tmp/dump.working.sql"
  }
  stages {
    stage ('Copie du dump') {
      steps {
        script {
          def src_dir = "/media/partage_mistral/Archives ALIZE/MISTRALBD/QUOTIDIEN"
          println("Sélection du dernier dump depuis le répertoire : <${src_dir}>")
          
          def src_file = sh (script: "ls '${src_dir}' -1tr | grep gz\$ | tail -1", returnStdout: true).trim() as String
          def src_path = src_dir + '/' + src_file
          println("-> ${src_path}")
          
          println("Copie du fichier")
          sh (script: "cp -f '${src_path}' ${DUMP_ARCHIVE_PATH}", returnStdout: false)
        }
      }
    }
    stage ('Extraction du dump') {
      steps {
        script {
          println("Extraction de l'archive")
          sh (script: "gzip -dfq ${DUMP_ARCHIVE_PATH}", returnStdout: false)
        }
      }
    }
    stage ('Traitement du script d\'import') {
      steps {
        script {
          println("Mise en forme du fichier source")
          sh (script: "sed 's/\\sDEFINER=`[^`]*`@`[^`]*`//g' -i ${DUMP_SRC_PATH}", returnStdout: false)
          
          if (params.IMPORT_USER_ACTION_LOGGING==false) {
            println("Suppression des traces utilisateurs")
            sh (script: "grep  -v -i 'INSERT INTO `user_action_logging`' ${DUMP_SRC_PATH} > ${DUMP_WORK_PATH}", returnStdout: false) 
            sh (script: "cp -f ${DUMP_WORK_PATH} ${DUMP_SRC_PATH}", returnStdout: false)
          }
          
          if (params.IMPORT_COMMERCIALS_INFO==false) {
            println("Suppression des informations commerciales")
            sh (script: "egrep  -v -i -e 'INSERT INTO `invoice[[:digit:]]{4}`' -e 'INSERT INTO `deliveryorder`' ${DUMP_SRC_PATH} > ${DUMP_WORK_PATH}", returnStdout: false)
            sh (script: "cp -f ${DUMP_WORK_PATH} ${DUMP_SRC_PATH}", returnStdout: false)
          }          
          
          if (params.IMPORT_COMMERCIALS_TABLES==false) {
            println("Suppression des données commerciales")
            sh (script: "egrep  -v -i -e 'INSERT INTO `invoice[[:digit:]]{4}collectionclient`' -e 'INSERT INTO `invoice[[:digit:]]{4}groupclient`' -e 'INSERT INTO `invoice[[:digit:]]{4}houseclient`' -e 'INSERT INTO `invoice[[:digit:]]{4}shelvingclient`' -e 'INSERT INTO `invoice[[:digit:]]{4}collection`' -e 'INSERT INTO `invoice[[:digit:]]{4}salepoint`' -e 'INSERT INTO `invoice[[:digit:]]{4}salepointarticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}centralarticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}signarticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}signtypearticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}countryarticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}countryclient`' -e 'INSERT INTO `invoice[[:digit:]]{4}clientarticle`' -e 'INSERT INTO `invoice[[:digit:]]{4}clientgroupingarticle`' -e 'INSERT INTO `deliveryordercollectionclient`' -e 'INSERT INTO `deliveryordergroupclient`' -e 'INSERT INTO `deliveryorderhouseclient`' -e 'INSERT INTO `deliveryordershelvingclient`' -e 'INSERT INTO `deliveryordercollection`' -e 'INSERT INTO `deliveryordersalepoint`' -e 'INSERT INTO `deliveryordersalepointarticle`' -e 'INSERT INTO `deliveryordercentralarticle`' -e 'INSERT INTO `deliveryordersignarticle`' -e 'INSERT INTO `deliveryordersigntypearticle`' -e 'INSERT INTO `deliveryordercountryarticle`' -e 'INSERT INTO `deliveryordercountryclient`' -e 'INSERT INTO `deliveryorderclientarticle`' -e 'INSERT INTO `deliveryorderclientgroupingarticle`' -e 'INSERT INTO `invoice[[:digit:]]clientcumulation`' -e 'INSERT INTO `invoice[[:digit:]]clientclassifcumulation`' ${DUMP_SRC_PATH} > ${DUMP_WORK_PATH}", returnStdout: false)
            sh (script: "cp -f ${DUMP_WORK_PATH} ${DUMP_SRC_PATH}", returnStdout: false)
          }
        }
      }
    }
    stage ('Import des données en base') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'jenkins-user-for-mysql', passwordVariable: 'DATABASE_PASSWORD', usernameVariable: 'DATABASE_USERNAME')]) {
          script {
            def target_host
            
            if (ENVIRONMENT=="Master") {
              target_host="mysql_master"
            } else if (ENVIRONMENT=="Development") {
              target_host="mysql_develop"
            } else if (ENVIRONMENT=="Feature") {
              target_host="mysql_feature"
            } else if (ENVIRONMENT=="Release") {
              target_host="mysql_release"
            }
            
            sh (script: '''mysql --host=''' + target_host + ''' --user=${DATABASE_USERNAME} --password=${DATABASE_PASSWORD} <<-EOF 
                DROP DATABASE IF EXISTS alize; 
                CREATE DATABASE IF NOT EXISTS alize;
                USE alize;
                source ${DUMP_SRC_PATH};
                DELETE FROM ftppartnership;
                UPDATE house SET divaltodirectory ='', divaltobackdirectory = '',  accountingfolder = '', accountingmail = '';
                exit
EOF''', 
                returnStdout: false)
          }
          
        }
      }
    }
  }
  post {
    always {
      println("Suppression de l'archive")
      sh (script: "rm -f ${DUMP_ARCHIVE_PATH}", returnStdout: false)    
      
      println("Suppression du script")
      sh (script: "rm -f ${DUMP_SRC_PATH}", returnStdout: false)
      
      println("Suppression du script de travail")
      sh (script: "rm -f ${DUMP_WORK_PATH}", returnStdout: false)
    }
  }
}
